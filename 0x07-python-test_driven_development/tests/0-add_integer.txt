Write a function that adds 2 integers.

Prototype: def add_integer(a, b=98):
a and b must be integers or floats, otherwise raise a TypeError exception with the message a must be an integer or b must be an integer
a and b must be first casted to integers if they are float
Returns an integer: the addition of a and b

Import the module

>>> add_integer = __import__('0-add_integer').add_integer

Usage:
>>> add_integer(3, 4)
7

>>> add_integer(4.5, 1.5)
5

Tests:

""" should work if the second parameter is not passed in which case the default value will be 98"""
>>> add_integer(2)
100

""" should work with negative integers"""
>>> add_integer(100, -2)
98

"""floats van be passed but the returned value must be an int"""
>>> add_integer(100.3, -2)
98

"""if any other type is passed apart from int or float raise a TypeError"""
>>> add_integer("hello", 4)
Traceback (most recent call last):
	...
TypeError: a must be an integer

>>> add_integer(5, "world")
Traceback (most recent call last):
	...
TypeError: b must be an integer

>>> add_integer(None)
Traceback (most recent call last):
	...
TypeError: a must be an integer

>>> add_integer(4, None)
Traceback (most recent call last):
	...
TypeError: b must be an integer
